// middle background appearing behind tamawashi
var bgImage = null

// top and bottom image for option selection
var selImage = null

// interval id for the primary game thread
var gameIntervalId = 0

// rate of the game cycle
var framesPerSec = 1

// color appearing in unselected option icons
lcdOFF = "rgb(75, 96, 84)"

// color for active 'pixels'
lcdON = "rgb(25, 32, 28)"

// pixel counts and size
tileCountVert = 30
tileCountHori = 54
tileSize = 600 / tileCountHori

// number of pixels to offset main display from black offset edge
baseX = 3
baseY = 3

// window initializer
window.onload=function() {
	canv=document.getElementById("canv")
    ctx=canv.getContext("2d")
    
    // black background providing offset edge
    ctx.fillStyle="black"
    ctx.fillRect(0, 0, canv.width, canv.height)

    ctx.fillStyle=lcdOFF
    ctx.fillRect(baseX, baseY, canv.width, canv.height)

    bgImage = document.getElementById("bg")
    selImage = document.getElementById("sel")

    ctx.drawImage(bgImage, baseX, baseY)
    ctx.drawImage(selImage, baseX, baseY)

	document.addEventListener("keydown",keyDown)
    printEgg()
	gameIntervalId = setInterval(printEgg,1000/(framesPerSec))
}

// prevent default is needed 
window.addEventListener('mousemove', function(e) {e.preventDefault()}, false)

// array of sprites
sprites = [
[ // 0:egg 1
[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0], [0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0], [0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0], [0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0], [0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0], [0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0], [0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0], [1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0]
],
[ // 1:egg 2
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0], [0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0], [0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0], [0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0], [0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0], [0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0], [0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0], [1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0]
],
[ // 2:hatch 1
[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0], [0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0], [0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0], [1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0]
],
[ // 3:hatch 2
[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0], [0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0], [1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0]
],
[ // 4:shake 1
[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0], [0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0], [1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0]
],
[ // 5:meander 1
[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0], [0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0], [0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0], [1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0]
],
[ // 6:meander 2
[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0], [0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0], [0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0], [1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0]
],
[ // 7:eat 1
[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0], [0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0], [1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0]
],
[ // 8:eat 2
[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0], [0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0], [1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0]
],
[ // 9:kaw 1
[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0], [0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0], [0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0], [1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0]
],
[ // 10:sick 1
[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0], [0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0], [1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0]
],
[ // 11:sad 1
[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0], [0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0], [0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0], [1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0]
],
[ // 12:hungry 1
[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0], [0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0], [1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0]
],
[ // 13:medicine 1
[0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0],
[0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1],
[0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1],
[0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1],
[0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1],
[0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0],
[0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0],
[1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0],
[1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
[1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
[1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
[0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]
],
[ // 14:medicine 2
[0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
[0, 0, 0, 0, 0, 1, 0, 1, 0, 0],
[0, 0, 0, 0, 1, 0, 1, 1, 0, 0],
[0, 0, 0, 1, 0, 1, 1, 1, 1, 0],
[0, 0, 1, 0, 0, 0, 1, 1, 1, 0],
[0, 1, 0, 0, 0, 0, 0, 1, 1, 0],
[1, 0, 0, 0, 0, 0, 0, 0, 1, 1],
[1, 0, 0, 0, 0, 0, 0, 0, 0, 1],
[1, 0, 0, 0, 0, 0, 0, 0, 1, 0],
[1, 0, 0, 0, 0, 0, 0, 1, 0, 0],
[0, 1, 0, 0, 0, 0, 1, 0, 0, 0],
[0, 0, 1, 1, 1, 1, 0, 0, 0, 0]
],
[ // 15:heart 1
[0, 1, 1, 0, 1, 1, 0],
[1, 0, 1, 1, 1, 1, 1],
[1, 0, 1, 1, 1, 1, 1],
[1, 0, 1, 1, 1, 1, 1],
[0, 1, 1, 1, 1, 1, 0],
[0, 0, 1, 1, 1, 0, 0],
[0, 0, 0, 1, 0, 0, 0]
],
[ // 16:heart 2
[0, 1, 1, 0, 1, 1, 0],
[1, 0, 0, 1, 0, 0, 1],
[1, 0, 0, 0, 0, 0, 1],
[1, 0, 0, 0, 0, 0, 1],
[0, 1, 0, 0, 0, 1, 0],
[0, 0, 1, 0, 1, 0, 0],
[0, 0, 0, 1, 0, 0, 0]
],
[ // 17:poop 1
[0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
[0, 0, 1, 0, 0, 0, 0, 1, 0, 0],
[0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
[0, 0, 1, 0, 0, 0, 0, 0, 0, 1],
[0, 0, 0, 1, 0, 0, 0, 0, 1, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
[0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
[0, 0, 0, 1, 1, 1, 1, 0, 0, 0],
[0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
[0, 1, 0, 1, 1, 1, 1, 0, 1, 0],
[1, 0, 1, 1, 1, 1, 1, 1, 0, 1],
[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
],
[ // 18:poop 2
[0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
[0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
[0, 0, 1, 0, 0, 0, 0, 1, 0, 0],
[0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
[0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
[0, 0, 0, 1, 1, 1, 1, 0, 0, 0],
[0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
[0, 1, 0, 1, 1, 1, 1, 0, 1, 0],
[1, 0, 1, 1, 1, 1, 1, 1, 0, 1],
[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
],
[ // 19:food 1
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1],
[0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1],
[0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1],
[0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1],
[0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0],
[0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0],
[0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0],
[0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0],
[1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0],
[0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]
],
[ // 20:food 2
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0],
[0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0],
[0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0],
[0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0],
[0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0],
[0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0],
[1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0],
[0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]
],
[ // 21:food 3
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0],
[1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
[0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]
],
[ // 22:clean 1
[0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0],
[0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0],
[0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0],
[0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0],
[0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0],
[0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0],
[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0],
[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0],
[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1],
[0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1],
[0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
[1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0],
[0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0],
[0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0],
[0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0],
[0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0],
[1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0],
[1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1],
[1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0],
[0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
[1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0],
[1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0],
[0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0],
[0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0],
[0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0],
[0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0]
],
[ // 23:dead 1
[0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0],
[0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0],
[0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0],
[0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0],
[0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0],
[0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0],
[0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0],
[0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0],
[0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0],
[0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0],
[0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
[1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
],
[ // 24:sleep 1
[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0], [0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0], [0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0], [0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0], [0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0], [0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0], [0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0], [1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0]
],
[ // 25:z1
[1, 1, 1, 1],
[0, 0, 1, 0],
[0, 1, 0, 0],
[1, 1, 1, 1]
],
[ // 26:z2
[0, 0, 1, 1, 1, 1, 1, 1],
[0, 0, 0, 0, 0, 0, 1, 0],
[0, 0, 0, 0, 0, 1, 0, 0],
[0, 0, 0, 0, 1, 0, 0, 0],
[0, 0, 0, 1, 0, 0, 0, 0],
[0, 0, 1, 1, 1, 1, 1, 1],
[0, 0, 0, 0, 0, 0, 0, 0],
[0, 1, 0, 0, 0, 0, 0, 0],
[1, 1, 0, 0, 0, 0, 0, 0]
],
[ // 27:hunger label
[1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1],
[1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1],
[1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1],
[1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0],
[1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0]
],
[ // 28:happy label
[1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1],
[1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1],
[1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1],
[1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0],
[1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0]
],
[ // 29:age label
[0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0],
[1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1],
[1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0],
[1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1],
[1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0]
],
[ // 30:score label
[0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0],
[1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1],
[0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0],
[0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1],
[1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0]
],
[ // 31:zero
[0, 1, 0],
[1, 0, 1],
[1, 0, 1],
[1, 0, 1],
[0, 1, 0]
],
[// 32:one
[0, 1, 0],
[1, 1, 0],
[0, 1, 0],
[0, 1, 0],
[1, 1, 1]
],
[ // 33:two
[1, 1, 1],
[0, 0, 1],
[1, 1, 1],
[1, 0, 0],
[1, 1, 1]
],
[ // 34:three
[1, 1, 1],
[0, 0, 1],
[1, 1, 1],
[0, 0, 1],
[1, 1, 1]
],
[ // 35:four
[1, 0, 1],
[1, 0, 1],
[1, 1, 1],
[0, 0, 1],
[0, 0, 1]
],
[ // 36:five
[1, 1, 1],
[1, 0, 0],
[1, 1, 1],
[0, 0, 1],
[1, 1, 1]
],
[ // 37:six
[1, 1, 1],
[1, 0, 0],
[1, 1, 1],
[1, 0, 1],
[1, 1, 1]
],
[ // 38:seven
[1, 1, 1],
[0, 0, 1],
[0, 1, 0],
[1, 0, 0],
[1, 0, 0]
],
[ // 39:eight
[1, 1, 1],
[1, 0, 1],
[1, 1, 1],
[1, 0, 1],
[1, 1, 1]
],
[ // 40:nine
[1, 1, 1],
[1, 0, 1],
[1, 1, 1],
[0, 0, 1],
[0, 0, 1]
],
[ // 41:ball1
[0, 1, 1, 0],
[1, 1, 1, 1],
[1, 1, 1, 1],
[0, 1, 1, 0]
]
]

// sprite enum
const spr = {
    EGG1: 0,
    EGG2: 1,
    HATCH1: 2,
    HATCH2: 3,
    SHAKE1: 4,
    MEANDER1: 5,
    MEANDER2: 6,
    EAT1: 7,
    EAT2: 8,
    KAW1: 9,
    SICK1: 10,
    SAD1: 11,
    HUNGRY1: 12,
    MEDICINE1: 13,
    MEDICINE2: 14,
    HEART_FULL: 15,
    HEART_EMPTY: 16,
    POOP1: 17,
    POOP2: 18,
    FOOD1: 19,
    FOOD2: 20,
    FOOD3: 21,
    CLEAN1: 22,
    GRAVE1: 23,
    SLEEP1: 24,
    Z1: 25,
    Z2: 26,
    HUNGER_LABEL: 27,
    HAPPY_LABEL: 28,
    AGE_LABEL: 29,
    SCORE_LABEL: 30,
    ZERO: 31,
    ONE: 32,
    TWO: 33,
    THREE: 34,
    FOUR: 35,
    FIVE: 36,
    SIX: 37,
    SEVEN: 38,
    EIGHT: 39,
    NINE: 40,
    BALL1: 41
}

// game state enum
const state = {
    EGG: 0,
    HATCH: 0,
    MEANDER: 1,
    FEED: 2,
    CLEAN: 3,
    DEAD: 5,
    MEDICATE: 6,
    STATUS: 7,
    PLAY: 8,
    GAME_END: 9,
    ASLEEP: 10
}

// selection option enum
const select = {
    NONE: -1,
    FEED: 0,
    MEDICINE: 1,
    CLEAN: 2,
    PLAY: 3,
    LIGHT: 4,
    STATUS: 5
}

gameState = state.EGG // capture the current state of the game

// interval ids for temporary threads
var tempIntervalId = null
var tempIntervalId2 = null
var buttonIntervalId = -1

selection = select.NONE // capture selection option hovered over

lightsOut = false // capture state of lights on/off

base = 600/tileSize*(0.75) // lowest position for printing 'pixels'
centerX = tileCountHori/2 
xPos = positionCenter(spr.EGG1) // initial x position of the sprite
direction = 1 // left:-1, right:1
counter = 1 // main game cycle counter
counterCapture = 0 // used for capturing game counter to mark start of animation sequence

const sleepCountdownMax = 5 // cycles to fall asleep when light is off
const wakeCountdownMax = 20 // cycles before waking up
const wakeCountdownMax_Light = 5 // cycles before waking up once light is turned on
sleepCountdown = sleepCountdownMax // used to countdown cycles until tamawashi falls asleep
wakeCountdown = wakeCountdownMax // used to coundown cycles until tamawashi wakes up

// variables for tracking hunger
hunger = 0
const hungerThreshold = 50
hungry = false

// variables for tracking bladder
bladder = 0
const bladderThreshold = 75
soiled = false

// variables for tracking sadness
sadness = 0
const sadnessThreshold = 75
sad = false

// variables for tracking sickness and death
sickness = 0
const sicknessThreshold = 75
const deathThreshold = 150
sick = false

/***************************************************/
/******************** EGG STATE ********************/
    
function printEgg(){
    hunger = 0
    bladder = 0
    sadness = 0
    var eggType = counter % 2 // egg type dependent on counter to alternate
    ctx.drawImage(bgImage, baseX, baseY)
    printSprite(eggType, positionCenter(eggType), base, false)
    counter++
}

function printHatch(){
        ctx.drawImage(bgImage, baseX, baseY)

        if (counterCapture <  2) {
            printSprite(spr.HATCH1, positionCenter(spr.HATCH1) - 1, base, false)
        }
        else if(counterCapture < 3){
            printSprite(spr.HATCH2, positionCenter(spr.HATCH2) - 1, base, false)
        }
        else if(counterCapture < 4){
            printSprite(spr.SHAKE1, positionCenter(spr.SHAKE1) - 1, base, false)
        }
        else{
            printSprite(spr.SHAKE1, positionCenter(spr.SHAKE1) - 1, base, true)
            counter = 0
            counterCapture = 0
            gameState = state.MEANDER
            clearInterval(gameIntervalId)
            gameIntervalId = setInterval(printMeander,1000/framesPerSec)
        } 
        counterCapture++
}

/*******************************************************/
/******************** MEANDER STATE ********************/

// change parameter used to prevent/allow action change
function printMeander(change = true) {
    ctx.drawImage(bgImage, baseX, baseY)

    if(change){
        action = Math.floor(Math.random()*15) % 15 // if "change", choose action
        dir = direction == 1 ? false : true
    }
    else{
        action = 1 // if "change" is false, action is "stand still"
        dir = direction == 1 ? false : true
    }

    if(lightsOut){ // if lightsOut (scene is dark) only print dark
        printDark()
    } else {
        var meanderSprite = spr.MEANDER1 + (counter % 2)

        xMin = 0

        if (soiled) { // print poop if soiled
            printSprite(spr.POOP1 + counter % 2, 0, base, false) // poop
            xMin = sprites[spr.POOP1][0].length
        }

        if(sick){ // print sick sprites
            if (action >= 12 && action <= 14) { // turn around
                direction *= -1
                dir = direction == 1 ? false : true
            }
            printSprite(spr.SICK1, positionCenter(spr.SICK1), base, dir)
        } else if(sad){ // print sad sprites
            if (action >= 12 && action <= 14) { // turn around
                direction *= -1
                dir = direction == 1 ? false : true
            }
            printSprite(spr.SAD1, positionCenter(spr.SAD1), base, dir)
        } else if(hungry){ // print hunger sprites
            if (action >= 12 && action <= 14) { // turn around
                direction *= -1
                dir = direction == 1 ? false : true
            }
            printSprite(spr.HUNGRY1, positionCenter(spr.HUNGRY1), base, dir)
        } else { // print standard sprites
            if (action == 0) { // kaw
                printSprite(spr.KAW1, xPos, base, dir)
            }
            else if (action >= 1 && action <= 7) { // stand still
                printSprite(meanderSprite, xPos, base, dir)
            }
            else if (action >= 8 && action <= 11) { // move forward
                xPos = xPos + 2 * direction
                if (xPos <= xMin || xPos + sprites[meanderSprite][0].length >= tileCountHori-4) {
                    xPos = xPos - 2 * direction
                    direction *= -1
                    dir = direction == 1 ? false : true
                }
                printSprite(meanderSprite, xPos, base, dir)
            }
            else if (action >= 12 && action <= 14) { // turn around
                direction *= -1
                dir = direction == 1 ? false : true
                printSprite(meanderSprite, xPos, base, dir)
            }
        }
    }

    // increment status values
    counter += 1
    hunger += 1
    bladder += 1
    sadness += 1
    if(soiled){
        sickness += 1
    }

    if (hunger > hungerThreshold) { // become hungry if value passes threshold
        hungry = true
        if (hunger > deathThreshold) { // dies if hunger passes threshold
            gameState = state.DEAD
            printDead()
        }
    }

    if (bladder > bladderThreshold) { // become soiled if value passes threshold
        soiled = true
    }

    if (sickness > sicknessThreshold) { // become sick if value passes threshold
        sick = true
        if (sickness > deathThreshold) { // dies if sickness passes threshold
            gameState = state.DEAD
            printDead()
        }
    }

    if (sadness > sadnessThreshold) { // become sad if value passes threshold
        sad = true
    }
}

/******************************************************/
/******************** EATING STATE ********************/

function printFeed() {
    ctx.drawImage(bgImage, baseX, baseY)

    // if hunger is full, eat food
    if (hunger > hungerThreshold / 4) {
        xPos = sprites[spr.FOOD1][0].length + 3

        if (counterCapture < 1) { 
            printSprite(spr.FOOD1, 0, base, false) 
            printSprite(spr.MEANDER1, xPos-1, base, true)
        }
        else if (counterCapture < 2) { 
            printSprite(spr.FOOD1, 0, base, false)
            printSprite(spr.EAT1, xPos, base, false)
        }
        else if (counterCapture < 3) { 
            printSprite(spr.FOOD2, 0, base, false)
            printSprite(spr.EAT2, xPos, base, false)
        }
        else if (counterCapture < 4) { 
            printSprite(spr.FOOD2, 0, base, false) 
            printSprite(spr.EAT1, xPos, base, false)
        }
        else if (counterCapture < 5) { 
            printSprite(spr.FOOD3, 0, base, false)
            printSprite(spr.EAT2, xPos, base, false)
        }
        else if (counterCapture < 6) { 
            printSprite(spr.FOOD3, 0, base, false)
            printSprite(spr.EAT1, xPos, base, false)
        }
        else if (counterCapture < 7) {
            // return game interval to "meander" after sequence
            printSprite(spr.EAT2, xPos, base, false)
            counterCapture = 0
            hunger = 0 // eating food resets hunger
            hungry = false
            gameState = state.MEANDER
            clearInterval(gameIntervalId)
            gameIntervalId = setInterval(printMeander,1000/framesPerSec)
        }   
    }
    // if hunger is not full, deny food
    else {
        xPos = positionCenter(spr.SHAKE1)
        if (counterCapture < 1) {
            printSprite(spr.SHAKE1, xPos, base, false)
        }
        else if (counterCapture < 2) {
            printSprite(spr.SHAKE1, xPos, base, true)
        }
        else if (counterCapture < 3) { 
            printSprite(spr.SHAKE1, xPos, base, false)
        }
        else {
            // return game interval to "meander" after sequence
            printSprite(spr.SHAKE1, xPos, base, true)
            counterCapture = 0
            gameState = state.MEANDER
            clearInterval(gameIntervalId)
            gameIntervalId = setInterval(printMeander,1000/framesPerSec)
        }
    }
    counterCapture++
}

/********************************************************/
/******************** MEDICINE STATE ********************/

function printMedicate() {
    ctx.drawImage(bgImage, baseX, baseY)

    if (sick) { // if sick, consume medicine
        xPos = sprites[spr.MEDICINE1][0].length + 3

        if (counterCapture < 1) {
            printSprite(spr.MEDICINE1, 0, base, false)
            printSprite(spr.MEANDER1, xPos-1, base, true)
        }
        else if (counterCapture < 2) {
            printSprite(spr.MEDICINE1, 0, base, false)
            printSprite(spr.EAT1, xPos, base, false)
        }
        else if (counterCapture < 3) {
            printSprite(spr.MEDICINE2, 0, base, false)
            printSprite(spr.EAT2, xPos, base, false)
        }
        else if (counterCapture < 4) {
            printSprite(spr.MEDICINE2, 0, base, false)
            printSprite(spr.EAT1, xPos, base, false)
        }
        else if (counterCapture < 5) {
            // return game interval to "meander" after sequence
            printSprite(spr.EAT2, xPos, base, false)
            sickness = 0 // consuming medicine resets sickness
            sick = false
            gameState = state.MEANDER 
            counterCapture = 0
            clearInterval(gameIntervalId)
            gameIntervalId = setInterval(printMeander,1000/framesPerSec)
        }
    }
    else { // if not sick, deny medicine
        xPos = positionCenter(spr.SHAKE1)

        if (counterCapture < 1) {
            printSprite(spr.SHAKE1, xPos, base, false)
        }
        else if (counterCapture < 2) {
            printSprite(spr.SHAKE1, xPos, base, true)
        }
        else if (counterCapture < 3) {
            printSprite(spr.SHAKE1, xPos, base, false)
        }
        else {
            // return game interval to "meander" after sequence
            printSprite(spr.SHAKE1, xPos, base, true)
            gameState = state.MEANDER
            counterCapture = 0
            clearInterval(gameIntervalId)
            gameIntervalId = setInterval(printMeander,1000/framesPerSec)
        }
    }
    counterCapture++
}

/********************************************************/
/******************** CLEANING STATE ********************/
function printClean(){
    ctx.drawImage(bgImage, baseX, baseY)

    printSprite(spr.CLEAN1, xTrack, base, false)
    if(soiled) // if soiled, print poop and increment poop position with each cycle
        printSprite(spr.POOP1, poopPos++, base, false)
    printSprite(spr.MEANDER1, xPos, base, true)

    xTrack++ // increment xTrack which defines position of the soap bubbles

    /* if tamawashi was right of center at start of clean:
       increment if:
       tamawashi is left of center (after cycled back to left) OR
       tamawashi is right of capture (before cycled to left) */
    if(xPosCapture > xPosCenter){
        if(xPos < xPosCenter || xPos >= xPosCapture) 
            xPos++
    } else {
    /* if tamawashi was left of center at start of clean:
       increment if:
       tamawashi is left of center (after cycled back to left) OR
       clean sprite is still visible (before cycled to left) */
        if(xPos < xPosCenter || xTrack < tileCountHori)
            xPos++
    }
    
    // if tamawashi has moved right of screen, move tamawashi to left of screen
    if(xPos > tileCountHori)
        xPos = -1 * sprites[spr.MEANDER1][0].length

    /* end clean cycle when tamawashi reaches center of screen,
       but make sure clean sprite is right of screen, to make sure 
       tamawashi is not reaching center due to starting to the left of center */
    if(xTrack > tileCountHori + sprites[spr.CLEAN1][0].length && xPos == xPosCenter){
        clearInterval(tempIntervalId)
        if (soiled) {
            // if tamawashi has been soiled, start rejoice interval
            var rejoiceCounter = 0
            var rejoiceIntervalId = setInterval(() =>  
            {               
                ctx.drawImage(bgImage, baseX, baseY)

                if (rejoiceCounter == 0 || rejoiceCounter == 2) {
                    printSprite(spr.EAT2, xPos + 1, base, false)
                }
                else if (rejoiceCounter == 1) {
                    printSprite(spr.EAT1, xPos + 1, base, false)
                }
                else {
                    // reset soiled and return cycle to meander
                    printSprite(spr.EAT1, xPos + 1, base, false)
                    gameState = state.MEANDER 
                    soiled = false
                    clearInterval(rejoiceIntervalId)
                    gameIntervalId = setInterval(printMeander,1000/framesPerSec)
                }  
                rejoiceCounter++

            }, 1000/framesPerSec)
        }
        else {
            // return game interval to "meander" if tamawashi has not been soiled
            gameState = state.MEANDER
            gameIntervalId = setInterval(printMeander,1000/framesPerSec)
        }
    }
}

/****************************************************/
/******************** PLAY STATE ********************/

// vertical position of the center of the paddle
paddlePosition = null

// position of the ball (top left)
ballPosX = null
ballPosY = null

// angle of the travel of the ball in radians
ballAngle = null

// multiplies the game cycle rate to speed up pong cycle
speedMultiplier = null

// counts the number of times the paddle hits the ball
goalCounter = null

// tamawashi sprite used when printing pong paddle
var paddleSprite = null

function printPlay(){
    // tamawashi is "meander" if counterCapture is 0 (ball has not hit paddle)
    if(counterCapture <= 0)
        paddleSprite = spr.MEANDER2

    // ball hits top or bottom border of game field
    if(ballPosY <= 0 || ballPosY >=  tileCountVert - sprites[spr.BALL1].length - 3)
        ballAngle *= -1 // flips "y direction" of ball trajectory

    // ball hits left border of game field
    if(ballPosX <= 2)
        ballAngle  = Math.PI - ballAngle // flip "x direction" or ball trajectory 

    // ball reaches right side of game field
    if(ballPosX >= tileCountHori - 14){
        // ball hits paddle
        if(ballPosY >= paddlePosition - 8 && ballPosY <= paddlePosition + 2){
            ballAngle  = Math.PI - ballAngle
            paddleSprite = spr.KAW1
            counterCapture = 13
            goalCounter++
            // hit top of paddle
            if(ballPosY >= paddlePosition -1 && ballPosY <= paddlePosition + 2)
                ballAngle *= 1.05
            // hit bottom of paddle
            else if(ballPosY >= paddlePosition -8 && ballPosY <= paddlePosition -5)
                ballAngle /= 1.05

            // 
            if(ballAngle < Math.PI/3 || (ballAngle > Math.PI && ballAngle < 9*Math.PI/8))
                ballAngle *= 1.05
            else if (ballAngle > 4*Math.PI/3 || (ballAngle < Math.PI && ballAngle > 7*Math.PI/8))
                ballAngle /= 1.05

            // accelerate pong cycle after each hit
            clearInterval(tempIntervalId)
            speedMultiplier *= 1.2
            tempIntervalId = setInterval(printPlay, 1000/(framesPerSec*speedMultiplier))
        } 
        else { // ball doesn't hit paddle (hits tamawashi)
            // enter "play end" cycle
            clearInterval(buttonIntervalId)
            counterCapture = 0
            paddleSprite = spr.SICK1
            gameState = state.GAME_END
            clearInterval(tempIntervalId)
            playEnd()
            tempIntervalId2 = setInterval(playEnd, 1000/(framesPerSec))
        }

    }

    // translate ball position
    ballPosX += Math.cos(ballAngle)
    ballPosY -= Math.sin(ballAngle)

    counterCapture--
    ctx.drawImage(bgImage, baseX, baseY)
    printBorder()
    printBall()
    printPaddle()
}

// array used for digits of pong score
var scoreArr

function playEnd(){
    var gameOverSprite = spr.SICK1
    if(goalCounter >= 5){
        sadness = 0
        sad = false
        gameOverSprite = spr.KAW1
    }

    ctx.drawImage(bgImage, baseX, baseY)

    switch(counterCapture){
        case 0:
            scoreArr = Array.from(String(goalCounter), Number)
        case 1:
        case 2:
            printSprite(spr.SCORE_LABEL, 1, base - 10)
            for(var i = 0; i < scoreArr.length; i++)
                printSprite(spr.ZERO + scoreArr[i], 2 + sprites[spr.SCORE_LABEL][0].length + (4*i), base - 10)
            break
        case 3:
            printSprite(gameOverSprite, positionCenter(gameOverSprite), base, true)
            break
        case 4:
            printSprite(gameOverSprite, positionCenter(gameOverSprite), base, false)
            break
        case 5:
            printSprite(gameOverSprite, positionCenter(gameOverSprite), base, true)
            break
        default:
            gameState = state.MEANDER
            counterCapture = 0
            clearInterval(tempIntervalId2)
            printMeander()
            gameIntervalId = setInterval(printMeander, 1000/(framesPerSec))
    }
    counterCapture++
}

// prints border around game field
function printBorder(){
    ctx.fillStyle=lcdON
    for (var x = 2; x < tileCountHori - 7; x++)
        ctx.fillRect( x*tileSize+baseX, (base)*tileSize+baseY, tileSize - 2, tileSize - 2)
    for (var x = 2; x < tileCountHori - 7; x++)
        ctx.fillRect( x*tileSize+baseX, (base - tileCountVert + 2)*tileSize+baseY, tileSize - 2, tileSize - 2)
    for (var y = 1; y < tileCountVert - 2; y++)
        ctx.fillRect(tileSize+baseX, (base - y)*tileSize+baseY, tileSize - 2, tileSize - 2)
}

// prints paddle and tamawashi during pong
function printPaddle(){
    for (var y = paddlePosition - 4; y < paddlePosition + 4; y++)
        ctx.fillRect((tileCountHori-10)*tileSize+baseX, (base - y)*tileSize+baseY, tileSize - 2, tileSize - 2)
        printSprite(paddleSprite, tileCountHori-9, base - tileCountVert/2 + (sprites[paddleSprite].length / 2) + 2, true)
}

// prints ball duing pong (obviously)
function printBall(){
    printSprite(spr.BALL1, Math.floor(ballPosX), base - Math.floor(ballPosY), false)
}


/****************************************************/
/******************** DARK STATE ********************/

/* used for printing a black screen.
   "type" represents the type of "Z" printed while asleep */
function printDark(type = -1){
    ctx.drawImage(bgImage, baseX, baseY)
    ctx.fillStyle=lcdON

    if(type == -1){ // "type" is not provided because tamawashi is awake
        for (var y = 0; y < tileCountVert - 1; y++)
            for (var x = 0; x < tileCountHori; x++)
                ctx.fillRect( x*tileSize+baseX, (base - y)*tileSize+baseY, tileSize - 2, tileSize - 2)
    }
    else { // "type" is provided when tamawashi is alseep to print correct "Z"
        xPos_Z = positionCenter(spr.SLEEP1) + sprites[spr.SLEEP1][0].length
        yPos_Z = base - (sprites[spr.SLEEP1].length - 2)
        sprHeight = sprites[type].length
        sprWidth = sprites[type][0].length

        // print active 'pixels' everywhere except for where the sprite prints
        for (var y = 0; y < tileCountVert - 1; y++)
            for (var x = 0; x < tileCountHori; x++)
                if((x < xPos_Z || x >= xPos_Z + sprWidth) || (y < yPos_Z -4 || y > yPos_Z + sprHeight -4))
                    ctx.fillRect( x*tileSize+baseX, (base - y)*tileSize+baseY, tileSize - 2, tileSize - 2)
       
        // print the sprites in inversion
        for (var y = 0; y < sprites[type].length; y++)
            for (var x = 0; x < sprites[type][y].length; x++)
                if (sprites[type][y][x] == 0)
                    ctx.fillRect((xPos_Z + x) * tileSize+baseX, (yPos_Z + y - sprHeight) * tileSize+baseY, tileSize - 2, tileSize - 2)
    }

    // if screen is printed dark but tamawashi is awake
    if(gameState != state.ASLEEP){
        if(sleepCountdown != 0){ // counting down to falling asleep
            sleepCountdown--
        }
        else { // sleepCountdown has reached 0, so tamawashi is falling asleep
            wakeCountdown = wakeCountdownMax
            gameState = state.ASLEEP
            clearInterval(gameIntervalId)
            printSleep()
            tempIntervalId = setInterval(printSleep,1000/framesPerSec)
        }
    }
}


/****************************************************/
/******************** SLEEP STATE *******************/

function printSleep(){
    ctx.drawImage(bgImage, baseX, baseY)
    if(lightsOut){
        printDark(spr.Z1 + counter%2)
    } else {
        printSprite(spr.SLEEP1, positionCenter(spr.SLEEP1), base, false)
        printSprite(spr.Z1 + counter%2, positionCenter(spr.SLEEP1) + sprites[spr.SLEEP1][0].length,
                                        base - (sprites[spr.SLEEP1].length - 2), false)
    }

    if(wakeCountdown != 0){ // counting down to waking up
        wakeCountdown--
    }
    else { // wakeCountdown has reached 0, so tamawashi is waking up
        sleepCountdown = -1
        gameState = state.MEANDER
        clearInterval(tempIntervalId)
        printMeander()
        gameIntervalId = setInterval(printMeander,1000/framesPerSec)
    }

    counter++
}


/******************************************************/
/******************** STATUS STATE ********************/

function printStatus(){
    ctx.drawImage(bgImage, baseX, baseY)
    xLoc = positionCenter(spr.HUNGER_LABEL)
    printSprite(spr.HUNGER_LABEL, xLoc, base - 22, false)
    for(var i = 0; i < 4; i++){
        if(hunger > hungerThreshold*(4 - i)/4)    
            printSprite(spr.HEART_EMPTY, xLoc + i*8, base - 14, false) 
        else
            printSprite(spr.HEART_FULL, xLoc + i*8, base - 14, false)
    }
    printSprite(spr.HAPPY_LABEL, xLoc, base - 8, false) 
    for(var i = 0; i < 4; i++){
        if(sadness > sadnessThreshold*(4 - i)/4)   
            printSprite(spr.HEART_EMPTY, xLoc + i*8, base, false) 
        else
            printSprite(spr.HEART_FULL, xLoc + i*8, base, false)
    }

    // stats increment while in "status" mode
    counter ++
    hunger ++
    bladder ++
    sadness ++
    if(soiled){
        sickness ++
    }

    if (hunger > hungerThreshold) {
        hungry = true
        if (hunger > deathThreshold) {
            gameState = state.DEAD
            printDead()
        }
    }

    if (bladder > bladderThreshold) {
        soiled = true
    }

    if (sickness > sicknessThreshold) {
        sick = true
        if (sickness > deathThreshold) {
            gameState = state.DEAD
            printDead()
        }
    }

    if (sadness > sadnessThreshold) {
        sad = true
    }
}

/****************************************************/
/******************** DEAD STATE ********************/

function printDead(){
    clearInterval(gameIntervalId)
    selection = select.NONE
    printSelection()
    ctx.drawImage(bgImage, baseX, baseY)
    ageArr = Array.from(String(Math.floor(counter/60)), Number)
    printSprite(spr.AGE_LABEL, 15, base - sprites[spr.GRAVE1].length - 2)
    for(var i = 0; i < ageArr.length; i++)
        printSprite(spr.ZERO + ageArr[i], 16 + sprites[spr.AGE_LABEL][0].length + (4*i), base - sprites[spr.GRAVE1].length - 2)
    printSprite(spr.GRAVE1, 20, base, false)
}

/****************************************************/
/******************** SELECTION PRINTER *************/

function printSelection(){
    // print "lcdOff" behind selection icons
    ctx.fillStyle=lcdOFF
    ctx.fillRect(baseX, baseY, canv.width, canv.height*0.21)
    ctx.fillRect(baseX, canv.height*0.79+baseY, canv.width, canv.height)

    // print "lcdOn" rectangle behind appropriate icon if one is selected
    if(selection != select.NONE){
        ctx.fillStyle=lcdON
        switch(selection){
            case select.FEED:
                ctx.fillRect(1+baseX, 1+baseY, canv.width/3-2, canv.height*0.21)
                break
            case select.MEDICINE:
                ctx.fillRect(canv.width/3+1+baseX, 1+baseY, canv.width/3-2, canv.height*0.21)
                break
            case select.CLEAN:
                ctx.fillRect(2*canv.width/3+1+baseX, 1+baseY, canv.width/3-2, canv.height*0.21)
                break
            case select.PLAY:
                ctx.fillRect(1+baseX, canv.height*0.79+baseY, canv.width/3-2,  canv.height*0.21-2)
                break
            case select.LIGHT:
                ctx.fillRect(canv.width/3+1+baseX, canv.height*0.79+baseY, canv.width/3-2,  canv.height*0.21-2)
                break
            case select.STATUS:
                ctx.fillRect(2*canv.width/3+1+baseX, canv.height*0.79+baseY, canv.width/3-2,  canv.height*0.21-2)
                break
        }
    }

    // print selection background image with hollow icons
    ctx.drawImage(selImage, baseX, baseY)
}

/**********************************************************/
/******************** HELPER FUNCTIONS ********************/

function printSprite(type, xPos, yPos, reverse) {
    ctx.fillStyle = lcdON
    if (!reverse) {
        for (var y = 0; y < sprites[type].length; y++)
            for (var x = 0; x < sprites[type][y].length; x++)
                if (sprites[type][y][x] == 1)
                    ctx.fillRect((xPos + x) * tileSize+baseX, (yPos + y - sprites[type].length) * tileSize+baseY, tileSize - 2, tileSize - 2)
    }
    else {
        for (var y = 0; y < sprites[type].length; y++)
            for (var x = 0; x < sprites[type][y].length; x++)
                if (sprites[type][y][x] == 1)
                    ctx.fillRect((xPos + sprites[type][y].length - x) * tileSize+baseX, (yPos + y - sprites[type].length) * tileSize+baseY, tileSize - 2, tileSize - 2)
    }
}

// function returns left most position fo sprite needed to center sprite on screen
function positionCenter(sprite){
    return centerX - sprites[sprite][0].length/2
}

/********************************************************/
/******************** BUTTON ACTIONS ********************/

function keyDown(evt) {
    buttonSelect(evt.keyCode)
}

timeCapture = null
selectedButton = null 

function buttonSelect(key) {
    switch(key){
        case 38: // "up arrow" key   -   used to increase game cycle speed
            framesPerSec *= 1.2
            console.log("framesPerSec: " + framesPerSec)
            clearInterval(gameIntervalId)
            switch(gameState){
                case state.MEANDER:
                    gameIntervalId = setInterval(printMeander,1000/framesPerSec)
                    break
                case state.FEED:
                    gameIntervalId = setInterval(printFeed,1000/framesPerSec)
                    break
                case state.MEDICATE:
                    gameIntervalId = setInterval(printMedicate,1000/framesPerSec)
                    break
                case state.CLEAN:
                    gameIntervalId = setInterval(printClean,1000/framesPerSec)
                    break
                case state.PLAY:
                    gameIntervalId = setInterval(printPlay,1000/framesPerSec)
                    break
                case state.STATUS:
                    gameIntervalId = setInterval(printStatus,1000/framesPerSec)
                    break
                case state.HATCH:
                    gameIntervalId = setInterval(printHatch,1000/framesPerSec)
                    break
                case state.EGG:
                    gameIntervalId = setInterval(printEgg,1000/framesPerSec)
                    break
            }
            break
        case 40: // "down arrow" key   -   used to decrease game cycle speed
            framesPerSec = 1
            console.log("framesPerSec: " + framesPerSec)
            clearInterval(gameIntervalId)
            switch(gameState){
                case state.MEANDER:
                    gameIntervalId = setInterval(printMeander,1000/framesPerSec)
                    break
                case state.FEED:
                    gameIntervalId = setInterval(printFeed,1000/framesPerSec)
                    break
                case state.MEDICATE:
                    gameIntervalId = setInterval(printMedicate,1000/framesPerSec)
                    break
                case state.CLEAN:
                    gameIntervalId = setInterval(printClean,1000/framesPerSec)
                    break
                case state.PLAY:
                    gameIntervalId = setInterval(printPlay,1000/framesPerSec)
                    break
                case state.STATUS:
                    gameIntervalId = setInterval(printStatus,1000/framesPerSec)
                    break
                case state.HATCH:
                    gameIntervalId = setInterval(printHatch,1000/framesPerSec)
                    break
                case state.EGG:
                    gameIntervalId = setInterval(printEgg,1000/framesPerSec)
                    break
            }
            break
        case 52: // "4" key   -   jump to "meander" state, for debugging purposes
            gameState = state.MEANDER
            clearInterval(gameIntervalId)
            printMeander()
            gameIntervalId = setInterval(printMeander,1000/framesPerSec)
            break
        case 53: // "5" key   -   jump to "asleep" state, for debugging purposes
            gameState = state.ASLEEP
            clearInterval(gameIntervalId)
            printSleep()
            gameIntervalId = setInterval(printSleep,1000/framesPerSec)
            break
        case 32: // "space bar"   -   jump to "hatch" state, for debugging purposes
            counterCapture = 0
            gameState = state.HATCH
            printHatch() 
            clearInterval(gameIntervalId)
            gameIntervalId = setInterval(printHatch, 1000/(framesPerSec))
    }

    if(gameState != state.DEAD){
        /* any button press while in "egg" state captures time
           and key for hatching conditions on button release */
        if(gameState == state.EGG){
            selectedButton = key
            var d = new Date()
            timeCapture = d.getTime()
        } 
        if(gameState == state.HATCH){
            // no button actions while hatching
        }
        /* detecting button actions while playing pong */
        else if(gameState == state.PLAY){
            switch(key) {
                case 49: // "1" - top button - moves paddle upward
                    clearInterval(buttonIntervalId)
                    buttonIntervalId = setInterval(() => {
                        if(paddlePosition < tileCountVert - 6){
                            paddlePosition++
                            ctx.drawImage(bgImage, baseX, baseY)
                            printBorder()
                            printBall()
                            printPaddle()
                        }
                    },1000/(framesPerSec*speedMultiplier))
                    break
                case 50: // "2" - middle button - moves paddle downward
                    clearInterval(buttonIntervalId)
                    buttonIntervalId = setInterval(() => {
                        if(paddlePosition > 5){
                            paddlePosition--
                            ctx.drawImage(bgImage, baseX, baseY)
                            printBorder()
                            printBall()
                            printPaddle()
                        }
                    },1000/(framesPerSec*speedMultiplier))
                    break
                case 51: // "3" - bottom button - ends game
                    clearInterval(buttonIntervalId)
                    counterCapture = 0
                    gameState = state.GAME_END
                    clearInterval(tempIntervalId)
                    playEnd()
                    tempIntervalId2 = setInterval(playEnd, 1000/(framesPerSec))
                    break
            }   
        } 
        else {
            switch(key) {
                case 49: // "1" key, selection button
                    selection = (selection + 1) % 6
                    printSelection()
                    break
                case 50: // "2" key, enter button
                    switch(selection){
                            case select.FEED: 
                                if(gameState == state.MEANDER && !lightsOut){
                                    gameState = state.FEED
                                    printFeed()
                                    clearInterval(gameIntervalId)
                                    gameIntervalId = setInterval(printFeed, 1000/framesPerSec)
                                }
                                break
                            case select.MEDICINE:
                                if(gameState == state.MEANDER && !lightsOut) {
                                    gameState = state.MEDICATE 
                                    printMedicate()
                                    clearInterval(gameIntervalId)
                                    gameIntervalId = setInterval(printMedicate, 1000/framesPerSec)
                                }
                                break
                            case select.CLEAN:
                                if(gameState == state.MEANDER && !lightsOut) {
                                    gameState = state.CLEAN 
                                    bladder = 0
                                    printMeander(false)
                                    clearInterval(gameIntervalId)
                                    xTrack = -1*sprites[spr.CLEAN1][0].length
                                    poopPos = 0
                                    xPosCapture = xPos
                                    xPosCenter = positionCenter(spr.MEANDER1)
                                    tempIntervalId = setInterval(printClean, 1000/(framesPerSec*40))
                                }
                                break
                            case select.PLAY:
                                if(gameState == state.MEANDER && !lightsOut){
                                    gameState = state.PLAY
                                    paddleSprite = spr.MEANDER2
                                    paddlePosition = tileCountVert/2
                                    ballPosX = tileCountHori/2 - 6
                                    ballPosY = tileCountVert/2 - 3
                                    ballAngle = Math.PI/4
                                    speedMultiplier = 15
                                    counterCapture = 0
                                    goalCounter = 0
                                    printPlay()
                                    clearInterval(gameIntervalId)
                                    tempIntervalId = setInterval(printPlay, 1000/(framesPerSec*speedMultiplier))
                                }
                                break
                            case select.LIGHT:
                                // toggle lights on and off
                                lightsOut = !lightsOut

                                // tamawashi is awake
                                if(gameState == state.MEANDER){
                                    wakeCountdown = wakeCountdownMax
                                    sleepCountdown = sleepCountdownMax
                                    if(lightsOut){ // lights went from on to off
                                        printDark()
                                    }
                                    else { // lights went from off to on
                                        printMeander()
                                    }
                                }
                                // tamawashi is asleep
                                if(gameState == state.ASLEEP){
                                    printSleep()
                                    /* if light is toggled when tamawashi is asleep, wakeCountdown
                                       is kept at the minimum of either lights-on wakeCountdown 
                                       or the remaining time before tamawashi would wake up anyway */
                                    wakeCountdown = Math.min(wakeCountdownMax_Light, wakeCountdown)
                                }
                                break
                            case select.STATUS:
                                if(gameState == state.MEANDER) {
                                    gameState = state.STATUS 
                                    printStatus()
                                    clearInterval(gameIntervalId)
                                    gameIntervalId = setInterval(printStatus, 1000/framesPerSec)
                                }
                                break
                    }
                    selection = select.NONE
                    printSelection()
                    break

                case 51: // "3" key, exit button
                    selection = select.NONE
                    printSelection()
                    if(gameState == state.STATUS || gameState == state.GAME_END){
                        counterCapture = 0
                        gameState = state.MEANDER
                        printMeander()
                        clearInterval(tempIntervalId2)
                        clearInterval(gameIntervalId)
                        gameIntervalId = setInterval(printMeander, 1000/(framesPerSec))
                    }
                    break
            }
        }
    }
}

function buttonRelease(key = -1){
    if(gameState == state.EGG && key == selectedButton){
        var d = new Date()
        var n = d.getTime()
        // hatch tamawashi if any button has been held for 2 seconds
        if(n - timeCapture > 2000){
            counterCapture = 0
            gameState = state.HATCH
            clearInterval(gameIntervalId)
            gameIntervalId = setInterval(printHatch, 1000/(framesPerSec))
        }
    } 
    // this is necessary to stop paddle movement after button release
    else if(gameState == state.PLAY){
        clearInterval(buttonIntervalId)
    }
}