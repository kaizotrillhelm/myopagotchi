{"version":3,"sources":["contexts/walletslice.js","assets/a.png","components/Connect.js","contexts/detailSlice.js","components/Card.js","components/Nav.js","pages/Home.js","pages/Detail.js","Router.js","reportWebVitals.js","contexts/store.js","index.js"],"names":["counterSlice","createSlice","name","initialState","isConnected","publicKey","reducers","login","state","exit","setPublicKey","action","payload","actions","Connect","dispatch","useDispatch","className","style","height","src","logo","alt","onClick","window","solana","isPhantom","connect","then","resp","pbKey","toString","console","log","catch","err","alert","open","detailSlice","data","setDetailData","Card","nft","useEffect","to","textDecoration","width","image","seller_fee_basis_points","Nav","display","xmlns","fill","class","viewBox","d","disconnect","on","href","Home","useSelector","wallet","useState","loading","setLoading","nftData","setNftData","a","getNftTokenData","getAllNftData","createConnectionConfig","clusterApiUrl","provider","ownerToken","isValidSolanaAddress","getParsedNftAccountsByOwner","publicAddress","connection","serialization","nfts","Object","keys","map","key","arr","n","length","i","uri","axios","get","val","push","Detail","detail","nombre","App","includes","location","this","buttonClick","bind","subComponent","React","Component","collection","family","properties","maxSupply","description","Router","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","configureStore","reducer","Walletslice","DetailSlice","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.52417cf1.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState: {\n    isConnected:false,\n    publicKey : \"\",\n  },\n  reducers: {\n    login: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.isConnected = true\n    },\n    exit: (state) => {\n      state.isConnected = false\n    },\n    setPublicKey: (state, action) => {\n      state.publicKey = action.payload\n    },\n  },\n})\n\n// Action creators are generated for each case reducer function\nexport const { login, exit, setPublicKey } = counterSlice.actions\n\nexport default counterSlice.reducer","export default __webpack_public_path__ + \"static/media/a.16e81a89.png\";","import React from 'react'\nimport {  useDispatch } from 'react-redux'\nimport { login, setPublicKey } from '../contexts/walletslice'\nimport logo from \"../assets/a.png\"\n\nexport default function Connect() {\n\n\n    const dispatch = useDispatch()\n\n    const connectClick = () => {\n\n        const isPhantomInstalled = window.solana && window.solana.isPhantom\n\n        if (isPhantomInstalled) {\n            connectWallet() \n        }else{\n            window.alert(\"Please Install Phantom or Register to Phantom\")\n            window.open(\"https://phantom.app/\", \"_blank\");\n        }\n    }\n\n    function connectWallet() {\n        window.solana.connect()\n            .then(resp => {\n                const pbKey = resp.publicKey.toString()\n                console.log(resp)\n                dispatch(login())\n                dispatch(setPublicKey(pbKey))\n            })\n            .catch(err => {\n                window.alert(\"Error! Please try again later!\")\n          \n            })\n\n\n    }\n    return (\n        <div>\n            <div className=\"container\">\n                <div className=\"row  d-flex flex-column\" style={{ height: \"100vh\" }}>\n\n                    <div className=\"col-6 mx-auto my-auto\">\n                        <div className=\"d-flex flex-column align-items-center\">\n                            <img className=\"img-fluid w-25 mb-2\" src={logo} alt=\"img\" />\n                            <p className=\"text-light\">Please Connect to Wallet</p>\n                            <button onClick={connectClick} className=\"btn bg-primary w-50\">Connect</button>\n\n                        </div>\n                    </div>\n\n                </div>\n\n            </div>\n\n        </div>\n    )\n}\n","import { createSlice } from '@reduxjs/toolkit'\nexport const detailSlice = createSlice({\n  name: 'data',\n  initialState: {\n    data: []\n  },\n  reducers: {\n    setDetailData: (state, action) => {\n      state.data = action.payload\n    },\n  },\n})\n\n// Action creators are generated for each case reducer function\nexport const { setDetailData } = detailSlice.actions\n\nexport default detailSlice.reducer","import React,{useEffect} from 'react'\nimport { Link } from 'react-router-dom'\nimport { useDispatch } from 'react-redux';\nimport {setDetailData} from \"../contexts/detailSlice\"\n\n\nexport default function Card({nft}) {\n\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(setDetailData(nft))\n    }, [])\n\n\n\n    return (\n        <Link to={`/detail/${nft.name}`} style={{textDecoration:\"none\"}} className=\"mx-auto text-dark\">\n            <div className=\"card m-2\" style={{width:\" 18rem\"}}>\n                <div className=\"mx-auto my-2\" style={{width:\" 11rem\"}}>\n                <img  src={nft.image} className=\" card-img-top\" alt=\"...\" />\n\n\n                </div>\n               \n                <div  className=\"card-body \" >\n                    <h5 className=\"\">{nft.name}</h5>\n                    <h5 className=\"\">{nft.seller_fee_basis_points}</h5>\n\n                 \n                </div>\n            </div>\n\n        </Link>\n    )\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\nimport { exit, setPublicKey } from \"../contexts/walletslice\"\n\nexport default function Nav({ display }) {\n\n    const dispatch = useDispatch()\n\n    const clickHand = () => {\n\n\n        window.solana.disconnect()\n    \n           \n\n            window.solana.on('disconnect', () =>{\n                dispatch(exit())\n                dispatch(setPublicKey(\"\"))\n            } )\n\n\n    }\n\n\n    return (\n        <div>\n\n            <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n                <div className=\"container\">\n                    <Link className={`d-${display} text-dark`} to=\"/\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-arrow-left\" viewBox=\"0 0 16 16\">\n                        <path fill-rule=\"evenodd\" d=\"M15 8a.5.5 0 0 0-.5-.5H2.707l3.147-3.146a.5.5 0 1 0-.708-.708l-4 4a.5.5 0 0 0 0 .708l4 4a.5.5 0 0 0 .708-.708L2.707 8.5H14.5A.5.5 0 0 0 15 8z\" />\n                    </svg></Link>\n                    <ul className=\"navbar-nav  mb-2 mb-lg-0 ms-auto\">\n                        <li className=\"nav-item\">\n                            <button onClick={clickHand} class=\"btn btn-light\" aria-current=\"page\" href=\"#\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-door-closed\" viewBox=\"0 0 16 16\">\n                                <path d=\"M3 2a1 1 0 0 1 1-1h8a1 1 0 0 1 1 1v13h1.5a.5.5 0 0 1 0 1h-13a.5.5 0 0 1 0-1H3V2zm1 13h8V2H4v13z\" />\n                                <path d=\"M9 9a1 1 0 1 0 2 0 1 1 0 0 0-2 0z\" />\n                            </svg></button>\n                        </li>\n                    </ul>\n                </div>\n            </nav>\n\n        </div>\n    )\n}\n","import React, { useState, useEffect } from 'react'\nimport Connect from '../components/Connect'\nimport Card from '../components/Card'\nimport { useSelector } from 'react-redux'\nimport axios from \"axios\";\nimport {  clusterApiUrl } from \"@solana/web3.js\"; \nimport { getParsedNftAccountsByOwner, isValidSolanaAddress, createConnectionConfig, } from \"@nfteyez/sol-rayz\";\nimport Nav from '../components/Nav';\n\n\n\n\nfunction Home() {\n\n    const isConnected = useSelector((state) => state.wallet.isConnected)\n    const [loading, setLoading] = useState(true)\n\n    const [nftData, setNftData] = useState([])\n\n\n    useEffect(() => {\n        async function data() {\n            getNftTokenData()\n                .then((data) => {\n                    if (data) {\n                        setNftData(data)\n                        setLoading(false)\n                    }\n\n                })\n\n        }\n        console.log(isConnected);\n        data();\n        console.log(nftData);\n    }, [isConnected]);\n\n\n    const getAllNftData = async () => {\n        try {\n\n            if (isConnected === true) {\n                console.log(true);\n                const connect = await createConnectionConfig(clusterApiUrl(\"mainnet-beta\"));\n                const provider = window.solana;\n                let ownerToken = provider.publicKey;\n                const result = await isValidSolanaAddress(ownerToken);\n                const nfts = await getParsedNftAccountsByOwner({\n                    publicAddress: ownerToken,\n                    connection: connect,\n                    serialization: true,\n                });\n                console.log(nfts);\n\n                return nfts;\n\n            }\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    const getNftTokenData = async () => {\n        try {\n            let nftData = await getAllNftData();\n            var data = Object.keys(nftData).map((key) => nftData[key]); let arr = [];\n            let n = data.length;\n            for (let i = 0; i < n; i++) {\n                console.log(data[i].data.uri);\n                let val = await axios.get(data[i].data.uri);\n                arr.push(val);\n            }\n            console.log(`arr`)\n            return arr;\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n\n\n    if (!isConnected) {\n\n        return <Connect />\n\n    }\n    if (loading) {\n        return (\n            <div className=\"text-light\">\n                LOADING ...\n                \n            </div>\n        )\n    }\n\n\n\n    \n    return (\n        <div>\n\n            <Nav display={\"none\"} />\n\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-12 d-flex flex-wrap\">\n                        {\n                            nftData.map((data) => (\n                                <Card nft={data.data} />\n\n\n                            ))\n\n\n\n\n                        }\n\n\n\n\n\n                    </div>\n\n                </div>\n\n            </div>\n\n\n\n        </div>\n    )\n}\n\nexport default Home","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport Nav from '../components/Nav';\nimport ConnectPage from \"../components/Connect\"\nimport { NonceAccount } from '@solana/web3.js';\nimport { Component, PropTypes, ReactDOM } from 'react';\n\n\nexport default function Detail() {\n\n    \n\n    const isConnected = useSelector((state) => state.wallet.isConnected)\n\n\n    const nftData = useSelector((state) => (state.detail.data))\n\n    console.log(nftData);\n\n    let nombre = nftData.name\n\n    /*let leech = nombre.includes(\"Leech\");\n    let borg = nombre.includes(\"Borg\");\n    let clump = nombre.includes(\"Clump\");\n    let phylum = nombre.includes(\"Phylum\");\n    let egg = nombre.includes(\"Egg\"); */\n\n    let eggbool = false\n    let borgbool = false\n    let clumpbool = false\n    let leechbool = false\n\n\n    class App extends React.Component {\n  \n        buttonClick(){\n          console.log(\"came here\")\n                  \n            eggbool = nombre.includes(\"Egg\");\n        \n            if (eggbool == true) {\n            window.location='https://kaizotrillhelm.github.io/';\n            }\n        \n            clumpbool = nombre.includes(\"Clump\");\n        \n            if (clumpbool == true) {\n            window.location='https://kaizotrillhelm.github.io/';\n            }\n\n            borgbool = nombre.includes(\"Borg\");\n        \n            if (borgbool == true) {\n            window.location='https://kaizotrillhelm.github.io/';\n            }\n        \n            leechbool = nombre.includes(\"Leech\");\n        \n            if (leechbool == true) {\n            window.location='https://kaizotrillhelm.github.io/';\n            }\n          \n        }\n        \n        subComponent() {\n          return (<div>Click above to love your Myogotchi!</div>);\n        }\n        \n        render() {\n          return ( \n            <div className=\"patient-container\">\n                <button onClick={this.buttonClick.bind(this)}>Click me</button>\n                {this.subComponent()}\n             </div>\n           )\n        }\n        \n      \n      \n      }\n      \n      \n      \n\n/*\nclass LoadGotchi extends React {\n                      \n    leechbool = document.getElementById(\"demo\").innerHTML = nombre.includes(\"leech\");\n\n\n\n}*/\n\n\n\n  \n    \n    if(!isConnected){\n        return (<ConnectPage/>)\n    }\n    return (\n        <div>\n\n            <Nav display={\"\"}/>\n\n\n            <div className=\"container mt-5\">\n                <div className=\"row\">\n                    <div className=\"col-5\">\n                        <img className=\"img-fluid\" src={nftData.image} />\n\n                    </div>\n                    <div className=\"col-7\">\n                        <div className=\"row\">\n                            <div className=\"col-12\">\n                                <h1 className=\"text-light\">{nftData.name}</h1>\n\n                            </div>\n                           \n\n\n                            <div className=\"col-12  mt-5\">\n\n                                <p className=\"text-light\">{nftData.collection.name}\n                                <br/> \n                                {nftData.collection.family}  \n                                <br/> \n                                {nombre} \n                                <br/>\n\n\n                                <App/>\n    \n\n\n                                \n                                <br/>\n                                {nftData.properties.maxSupply}  \n                                                        \n                                </p>\n                                \n\n                                    \n\n\n                            </div>\n\n\n                \n\n                        </div>\n\n                    </div>\n\n                </div>\n                <div className=\"row mt-5\">\n                    <div className=\"col-12 text-light text-center\">\n                        {nftData.description}\n                                         \n                    </div>\n\n                </div>\n\n            </div>\n\n\n        </div>\n        \n\n\n    )\n}\n\n\n\n\n","import React from 'react';\nimport Home from \"./pages/Home\"\nimport {\n  BrowserRouter,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport Detail from './pages/Detail';\n\n\nexport default function Router() {\n\n\n  return (\n  \n       <BrowserRouter>\n          {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n        <Switch>\n          <Route path=\"/detail\">\n            <Detail />\n          </Route>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n    </BrowserRouter>\n \n  )\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit'\nimport Walletslice from './walletslice'\nimport DetailSlice from './detailSlice'\n\nexport default configureStore({\n  reducer: {\n      wallet : Walletslice,\n      detail : DetailSlice\n  },\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Router';\nimport reportWebVitals from './reportWebVitals';\nimport store from './contexts/store'\nimport { Provider } from 'react-redux'\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}